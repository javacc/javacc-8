#if TOKEN_EXTENDS
class Token extends ${TOKEN_EXTENDS} {
#else
class Token {
#fi


  /**
   * An optional attribute value of the Token.
   * Tokens which are not used as syntactic sugar will often contain
   * meaningful values that will be used later on by the compiler or
   * interpreter. This attribute value is often different from the this.image.
   * Any subclass of Token that actually wants to return a non-null value can
   * override this method as appropriate.
   */
  getValue() {
    return null;
  }

  /**
   * Constructs a new token for the specified Image and Kind.
   */
  Token(k, i)
  {
    this.kind = k;
    this.image = i;
  }

  /**
   * Returns the this.image.
   */
  override ToString()
  {
    if (this.kind == 0)  // 0 is always EOF
      return "EOF" + " (" + this.beginLine + ":" + this.beginColumn + "-" + this.endLine + ":" + this.endColumn + ")";

    return this.image + " (" + this.beginLine + ":" + this.beginColumn + "-" + this.endLine + ":" + this.endColumn + ")";
  }

  /**
   * Returns a new Token object, by default. However, if you want, you
   * can create and return subclass objects based on the value of ofKind.
   * Simply add the cases to the switch for all those special cases.
   * For example, if you have a subclass of Token called IDToken that
   * you want to create if ofKind is ID, simply add something like :
   *
   *    case MyParserConstants.ID : return new IDToken(ofKind, this.image);
   *
   * to the following switch statement. Then you can cast matchedToken
   * variable to the appropriate type and use sit in your lexical actions.
   */
  static Token newToken(ofKind, this.image)
  {
    switch(ofKind)
    {
      default : return new Token(ofKind, this.image);
    }
  }
}
