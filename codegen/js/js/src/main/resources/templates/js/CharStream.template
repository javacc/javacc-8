class CharStream
{
  setTabSize(i) { this.tabSize = i; }
  getTabSize() { return this.tabSize; }

  char beginToken()
  {
    this.tokenBegin = -1;
    let c = readChar();
    this.tokenBegin = this.bufpos;
    return c;
  }

#if KEEP_LINE_COLUMN
  UpdateLineColumn(c)
  {
    this.column++;

    if (this.prevCharIsLF)
    {
      this.prevCharIsLF = false;
      this.line += (this.column = 1);
    }
    else if (this.prevCharIsCR)
    {
      this.prevCharIsCR = false;
      if (c == '\n')
      {
        this.prevCharIsLF = true;
      }
      else
        this.line += (this.column = 1);
    }

    switch (c)
    {
      case '\r' :
        this.prevCharIsCR = true;
        break;
      case '\n' :
        this.prevCharIsLF = true;
        break;
      case '\t' :
        this.column--;
        this.column += (this.tabSize - (this.column % this.tabSize));
        break;
      default :
        break;
    }

    this.bufline[this.bufpos] = this.line;
    this.bufcolumn[this.bufpos] = this.column;
  }
#fi

  readChar()
  {
    if (++this.bufpos >= this.inputString.length) {
      throw new Error("EOF Reached";
    }

    let c = this.inputString[this.bufpos];
#if KEEP_LINE_COLUMN
    UpdateLineColumn(c);
#fi
    return c;
  }

  /** Get token end column number. */
  getEndColumn() {
#if KEEP_LINE_COLUMN
    return this.bufcolumn[this.bufpos];
#else
    return -1;
#fi
  }

  /** Get token end line number. */
  getEndLine() {
#if KEEP_LINE_COLUMN
     return this.bufline[this.bufpos];
#else
    return -1;
#fi
  }

  /** Get token beginning column number. */
  getBeginColumn() {
#if KEEP_LINE_COLUMN
    return this.bufcolumn[this.tokenBegin];
#else
    return -1;
#fi
  }

  /** Get token beginning line number. */
  getBeginLine() {
#if KEEP_LINE_COLUMN
    return this.bufline[this.tokenBegin];
#else
    return -1;
#fi
  }

/** Backup a number of characters. */
  backup(amount) {

    inBuf += amount;
    if ((this.bufpos -= amount) < 0)
      this.bufpos += bufsize;
  }

  /** Constructor. */
  constructor(input, startline, startcolumn)
  {
    inputString = input;
#if KEEP_LINE_COLUMN
    line = startline;
    column = startcolumn - 1;
#fi

#if KEEP_LINE_COLUMN
    this.bufline = [];
    this.bufcolumn = [];
    prevCharIsLF = prevCharIsCR = false;
#fi
    this.tokenBegin = 0;
    this.bufpos = -1;
  }

  /** Get token literal value. */
  GetImage()
  {
    return this.inputString, this.tokenBegin, this.bufpos - this.tokenBegin + 1);
  }

  /** Get the suffix. */
  GetSuffix(len)
  {
    return this.inputString.substring(this.bufpos - len + 1, len);
  }

  Done()
  {
  }

  /**
   * Method to adjust line and column numbers for the start of a token.
   */
  adjustBeginLineColumn(newLine, newCol)
  {
  }
  getTrackLineColumn() { return this.trackLineColumn; }
  setTrackLineColumn(bool tlc) { this.trackLineColumn = tlc; }
}
