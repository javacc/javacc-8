import java.io.PrintWriter;

/* Generated By:JavaCC: Do not edit this line. SimpleNode.java Version 8.0.0 */
public class Node implements Tree {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected ToyParser parser;

	public Node(int i) {
		id = i;
	}

	public Node(ToyParser p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node[] c = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	public String toString() {
		return ToyParserTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public void dump(String prefix) {
		System.out.println(toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				Node n = (Node) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	public int getId() {
		return id;
	}
	// Manually inserted code begins here

	public Token begin;
	public Token end;

	public void setFirstToken(Token t) {
		begin = t;
	}

	public void setLastToken(Token t) {
		end = t;
	}

	public void process(PrintWriter ostr) {
		System.out.println("Error - this should not be called");
		throw new Error();
	}

	// The following method prints token t, as well as all preceding
	// special tokens (essentially, white space and comments).

	protected void print(Token t, PrintWriter ostr) {
		Token tt = t.specialToken;
		if (tt != null) {
			while (tt.specialToken != null)
				tt = tt.specialToken;
			while (tt != null) {
				ostr.print(addUnicodeEscapes(tt.image));
				tt = tt.next;
			}
		}
		ostr.print(addUnicodeEscapes(t.image));
	}

	private String addUnicodeEscapes(String str) {
		String retval = "";
		char ch;
		for (int i = 0; i < str.length(); i++) {
			ch = str.charAt(i);
			if ((ch < 0x20 || ch > 0x7e) && ch != '\t' && ch != '\n' && ch != '\r' && ch != '\f') {
				String s = "0000" + Integer.toString(ch, 16);
				retval += "\\u" + s.substring(s.length() - 4, s.length());
			} else {
				retval += ch;
			}
		}
		return retval;
	}
}

/*
 * JavaCC - OriginalChecksum=ead71c6a9048255593cc597892617232 (do not edit this
 * line)
 */
