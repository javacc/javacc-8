\#ifndef JAVACC_TOKEN_H
\#define JAVACC_TOKEN_H

#if LIBRARY
\#include "ImportExport.h"
#fi
\#include "JavaCC.h"

namespace JavaCC {

/**
 * Describes the input token stream.
 */

#if LIBRARY
class ${PARSER_NAME_UPPER_CASE}_API Token 
#else
class Token 
#fi
{
public:
           Token();
           Token(int kind);
           Token(int kind, const JJString& image);
  virtual ~Token();

  /**
   * An integer that describes the kind of this token.  This numbering
   * system is determined by JavaCCParser, and a table of these numbers is
   * stored in the file ...Constants.java.
   */
  int& 				kind();
  
  int& 				beginLine();	// The line number of the first character of this Token.
  int& 				beginColumn();	// The column number of the first character of this Token.
  int& 				endLine();		// The line number of the last character of this Token.
  int& 				endColumn();	// The column number of the last character of this Token.
  
  JJString& 		image();		// The string image of the token.

  /**
   * A reference to the next regular (non-special) token from the input
   * stream.  If this is the last token from the input stream, or if the
   * token manager has not read tokens beyond this one, this field is
   * set to NULL.  This is true only if this token is also a regular
   * token.  Otherwise, see below for a description of the contents of
   * this field.
   */
  Token*& 			next();
  /**
   * This field is used to access special tokens that occur prior to this
   * token, but after the immediately preceding regular (non-special) token.
   * If there are no such special tokens, this field is set to NULL.
   * When there are more than one such special token, this field refers
   * to the last of these special tokens, which in turn refers to the next
   * previous special token through its specialToken field, and so on
   * until the first special token (whose specialToke_ field is NULL).
   * The next fields of special tokens refer to other special tokens that
   * immediately follow it (without an intervening regular token).  If there
   * is no such token, this field is NULL.
   */
  Token*& 			specialToken();
  
  /**
   * Returns a new Token, by default. However, if you want, you
   * can create and return subclass objects based on the value of ofKind.
   * Simply add the cases to the switch for all those special cases.
   * For example, if you have a subclass of Token called IDToken that
   * you want to create if ofKind is ID, simply add something like :
   *
   *    case MyParserConstants.ID : return new IDToken(ofKind, image);
   *
   * to the following switch statement. Then you can cast matchedToken
   * variable to the appropriate type and use sit in your lexical actions.
   */
  static Token* 	newToken(int ofKind, const JJString& image);
  static Token* 	newToken(int ofKind);

  /**
   * An optional attribute value of the Token.
   * Tokens which are not used as syntactic sugar will often contain
   * meaningful values that will be used later on by the compiler or
   * interpreter. This attribute value is often different from the image.
   * Any subclass of Token that actually wants to return a non-NULL value can
   * override this method as appropriate.
   */
  void*&      		value();

  const int& 		kind() const;	
  const int& 		beginLine() const;	
  const int& 		beginColumn() const;
  const int& 		endLine() const;
  const int& 		endColumn() const;
  const JJString& 	image() const;
  const Token*	 	next() const;
  const Token*	 	specialToken() const;
  const JJString& 	toString();
  const void* 		value() const;

private:
  int 		_kind;
  int 		_beginLine;	
  int 		_beginColumn;	
  int 		_endLine;		
  int 		_endColumn;	
  JJString 	_image;	
  Token* 	_next;
  Token* 	_specialToken;
  void*	 	_value;

};

inline  int& 			Token::kind()				{ return _kind; }
inline	int& 			Token::beginLine()			{ return _beginLine; }	
inline	int& 			Token::beginColumn()		{ return _beginColumn; }
inline	int& 			Token::endLine()			{ return _endLine; }
inline	int& 			Token::endColumn()			{ return _endColumn; }
inline	JJString& 		Token::image()				{ return _image; }
inline	Token*& 		Token::next()				{ return _next; }
inline	Token*& 		Token::specialToken()		{ return _specialToken; }
	
inline	const int& 		Token::kind() const 		{ return _kind; }
inline	const int& 		Token::beginLine() const	{ return _beginLine; }
inline	const int& 		Token::beginColumn() const	{ return _beginColumn; }
inline	const int& 		Token::endLine() const		{ return _endLine; }
inline	const int& 		Token::endColumn() const	{ return _endColumn; }
inline	const JJString& Token::image() const		{ return _image; }
inline	const Token* 	Token::next() const			{ return _next; }
inline	const Token*	Token::specialToken() const	{ return _specialToken; }

inline	const JJString& Token::toString()			{ return _image; }

inline	void*& 			Token::value() 				{ return _value; }
inline	const void* 	Token::value() const		{ return _value; }

}

using JavaCC::Token;

\#endif
