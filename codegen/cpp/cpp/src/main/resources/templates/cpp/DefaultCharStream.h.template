\#ifndef JAVACC_DEFAULT_CHAR_STREAM_H
\#define JAVACC_DEFAULT_CHAR_STREAM_H

#if LIBRARY
\#include "ImportExport.h"
#fi
\#include "JavaCC.h"
\#include "CharStream.h"

#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi

/**
 * This class describes a character stream that maintains line and
 * column number positions of the characters.  It also has the capability
 * to backup the stream to some extent.  An implementation of this
 * class is used in the TokenManager implementation generated by
 * JavaCCParser.
 *
 * All the methods except backup can be implemented in any fashion. backup
 * needs to be implemented correctly for the correct operation of the lexer.
 * Rest of the methods are all used to get information like line number,
 * column number and the string that constitutes a token and are not used
 * by the lexer. Hence their implementation won't affect the generated lexer's
 * operation.
 */
 
static constexpr int InitialBufferSize = 4096;

#if LIBRARY
class ${PARSER_NAME_UPPER_CASE}_API DefaultCharStream : public CharStream {
#else
class DefaultCharStream : public CharStream {
#fi
public:
  virtual ~DefaultCharStream();

  DefaultCharStream(const JJChar *buf, int sz, int startline, int startcolumn, int buffersize);
  DefaultCharStream(const JJChar *buf, int sz, int startline, int startcolumn);
  DefaultCharStream(const JJString& str, int startline, int startcolumn, int buffersize);
  DefaultCharStream(const JJString& str, int startline, int startcolumn);

  DefaultCharStream(ReaderStream *input_stream, int startline, int startcolumn, int buffersize);
  DefaultCharStream(ReaderStream *input_stream, int startline, int startcolumn);
  DefaultCharStream(ReaderStream *input_stream);
  
  virtual void ReInit(ReaderStream *input_stream, int startline, int startcolumn, int buffersize);
  virtual void ReInit(ReaderStream *input_stream, int startline, int startcolumn);
  virtual void ReInit(ReaderStream *input_stream);

  virtual void ReInit(const JJString& str, int startline, int startcolumn, int buffersize);
  virtual void ReInit(const JJString& str, int startline, int startcolumn);

/**
 * Backs up the input stream by amount steps. Lexer calls this method if it
 * had already read some characters, but could not use them to match a
 * (longer) token. So, they will be used again as the prefix of the next
 * token and it is the implementation's responsibility to do this right.
 */
  virtual void backup(int amount);

/**
 * Returns the next character that marks the beginning of the next token.
 * All characters must remain in the buffer between two successive calls
 * to this method to implement backup correctly.
 */
  virtual JJChar beginToken();

/**
 * Returns the next character from the selected input.  The method
 * of selecting the input is the responsibility of the class
 * implementing this class.
 */
  virtual JJChar readChar();

  virtual void expandBuff(bool wrapAround);
  virtual void fillBuff();

  /**
   * Returns a string made up of characters from the marked token beginning
   * to the current buffer position. Implementations can return
   * anything that they want to. For example, for efficiency, one might decide
   * to just return NULL, which is a valid implementation.
   */
  virtual JJString getImage();

  /**
   * Returns an array of characters that make up the suffix of length 'len' for
   * the currently matched token. This is used to build up the matched string
   * for use in actions in the case of MORE. A simple and inefficient
   * implementation of this is as follows :
   */
  virtual JJString getSuffix(int len);

  /**
   * The lexer calls this function to indicate that it is done with the stream
   * and hence implementations can free any resources held by this class.
   */
  virtual void deleteBuffers();

  bool endOfInput();
  void setTabSize(int i) 		{ tabSize = i; }
  int  getTabSize()      		{ return tabSize; }



  virtual void adjustBeginLineColumn(int newLine, int newCol);
#if KEEP_LINE_COLUMN
private:
  int getBufcolumn(int pos) ;
  int getBufline(int pos);

public:
  virtual int getColumn()        { return getBufcolumn(bufpos); }
  virtual int getLine()          { return getBufline(bufpos); }
  virtual int getEndColumn()     { return getBufcolumn(bufpos); }
  virtual int getEndLine()       { return getBufline(bufpos); }
  virtual int getBeginColumn()   { return getBufcolumn(tokenBegin); }
  virtual int getBeginLine()     { return getBufline(tokenBegin); }
#else
public:
  virtual int getColumn()        { return -1; }
  virtual int getLine()          { return -1; }
  virtual int getEndColumn()     { return -1; }
  virtual int getEndLine()       { return -1; }
  virtual int getBeginColumn()   { return -1; }
  virtual int getBeginLine()     { return -1; }
#fi

  virtual bool getTrackLineColumn()         { return trackLineColumn; }
  virtual void setTrackLineColumn(bool val) { trackLineColumn = val; }


protected:
  virtual void updateLineColumn(JJChar c);

  int*               bufline        	= nullptr;
  int*               bufcolumn      	= nullptr;
  JJChar*  	         buffer         	= nullptr;
  int                bufpos				= 0;
  int                bufsize			= 0;
  int                tokenBegin			= 0;
  int                column				= 0;
  int                line				= 0;
  bool               prevCharIsCR		= false;
  bool               prevCharIsLF		= false;
  int                available			= 0;
  int                maxNextCharInd		= 0;
  int                inBuf				= 0;
  int                tabSize			= 8;
  bool               trackLineColumn	= true;
  ReaderStream*      inputStream    	= nullptr;
  bool               deleteStream		= false;

private:
  void  init();
};

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi


\#endif
