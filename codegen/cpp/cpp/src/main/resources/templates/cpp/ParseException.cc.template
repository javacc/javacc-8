#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi

  ParseException::ParseException() {
  }

  ParseException::ParseException(const JJString& message) {
  }

  ParseException::ParseException(const Token* currentToken, const int** expectedTokenSequences, const JJString* tokenImage)
  {
    initialise(currentToken, expectedTokenSequences, tokenImage);
    this->currentToken = currentToken;
    this->expectedTokenSequences = expectedTokenSequences;
    this->tokenImage = tokenImage;
  }

  JJString ParseException::initialise(const Token* currentToken, const int** expectedTokenSequences, const JJString* tokenImage) {
\#if 0
    //JJString eol = System.getProperty("line.separator", "\n");
     expected = new JJString();
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      if (maxSize < expectedTokenSequences[i].length) {
        maxSize = expectedTokenSequences[i].length;
      }
      for (int j = 0; j < expectedTokenSequences[i].length; j++) {
        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
        expected.append((JJChar*)"...");
      }
      expected.append(eol).append("    ");
    }
    JJString retval = (JJChar*)"Encountered \"";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += (JJChar*)" ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += (JJChar*)" " + tokenImage[tok.kind];
      retval += (JJChar*)" \"";
      retval += add_escapes(tok.image);
      retval += (JJChar*)" \"";
      tok = tok.next;
    }
    retval += (JJChar*)"\" at line " + currentToken.next.beginLine + (JJChar*)", column " + currentToken.next.beginColumn;
    retval += (JJChar*)"." + eol;
    if (expectedTokenSequences.length == 1) {
      retval += (JJChar*)"Was expecting:" + eol + (JJChar*)"    ";
    } else {
      retval += (JJChar*)"Was expecting one of:" + eol + (JJChar*)"    ";
    }
    retval += expected.toString();
    return retval;
\#endif
    return (JJChar*)"Parse exception";
  }

\#define eol "\n"

  /**
   * Used to convert raw characters to their escaped version
   * when these raw version cannot be used as part of an ASCII
   * string literal.
   */
   JJString ParseException::addEscapes(const JJString& str) {
/*
      JJString *retval = new JJString();
      JJChar ch;
      for (int i = 0; i < str.length(); i++) {
        switch (str.charAt(i))
        {
           case '\b':
              retval.append("\\b");
              continue;
           case '\t':
              retval.append("\\t");
              continue;
           case '\n':
              retval.append("\\n");
              continue;
           case '\f':
              retval.append("\\f");
              continue;
           case '\r':
              retval.append("\\r");
              continue;
           case '\"':
              retval.append("\\\"");
              continue;
           case '\'':
              retval.append("\\\'");
              continue;
           case '\\':
              retval.append("\\\\");
              continue;
           default:
              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                 JJString s = "0000" + Integer.toString(ch, 16);
                 retval.append("\\u" + s.substring(s.length() - 4, s.length()));
              } else {
                 retval.append(ch);
              }
              continue;
        }
      }
      return retval.toString();
*/ return str;
   }

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi
