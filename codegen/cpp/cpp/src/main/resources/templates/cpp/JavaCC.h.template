\#ifndef JAVACC_JAVACC_H
\#define JAVACC_JAVACC_H

\#include <climits>
\#include <cstring>
\#include <string>
\#include <memory>
\#include <cassert>
\#include <cstdint>
\#include <cctype>
\#include <functional>
\#include <iostream>

\#ifndef JAVACC_CHAR_TYPE
\#define JAVACC_CHAR_TYPE char
\#define JAVACC_CHAR_TYPE_SIZEOF 1
\#define JJIN  std::cin
\#define JJOUT std::cout
\#define JJERR std::cerr
\#define JJLOG std::cout
\#define JJWIDE(x) #x
\#else
\#define JJIN  std::wcin
\#define JJOUT std::wcout
\#define JJERR std::wcerr
\#define JJLOG std::wcout
\#define JJWIDE(x) L###x
\#endif

constexpr unsigned long long ALLBITSUP = 0xFFFFFFFFFFFFFFFF;

\#ifndef JAVACC_STRING_TYPE
\#define JAVACC_STRING_TYPE   std::basic_string<JAVACC_CHAR_TYPE>
\#endif

\#define JAVACC_SIMPLE_STRING std::basic_string<char>

typedef JAVACC_CHAR_TYPE      JJChar;
typedef JAVACC_STRING_TYPE    JJString;
typedef JAVACC_SIMPLE_STRING  JJSimpleString;

static const JJChar JJEMPTY[] = { 0 };
static const JJChar JJSPACE[] = { ' ', 0 };
static const JJChar JJCOMMA[] = { ',', 0 };
static const JJChar JJQUOTE[] = { '\'', 0 };


// Abstraction on stream classes to read a block of data into a buffer.
class ReaderStream {
public:
  // Read block of data into a buffer and return the actual number read.
  virtual size_t read(JJChar* buffer, int offset, size_t len) { return 0; }
  virtual bool   endOfInput() { return true; }
  virtual ~ReaderStream() {}
};


template<typename T>
struct JJEnter
{
    JJEnter(T f) : f{f} {f();}
    ~JJEnter(){}
    T f;
};
template<typename T>
struct JJExit
{
    JJExit(T f) : f{f} {}
    ~JJExit(){f();}
    T f;
};

\#define OUT_OF_RANGE 0x0A
template<int size, typename T>
struct Array {
	T array[size];
public:
	T &operator[](size_t index) {
		if (index >= size)
			throw OUT_OF_RANGE;
		return array[index];
	}
	const T &operator[](size_t index) const {
		if (index >= size)
			throw OUT_OF_RANGE;
		return array[index];
	}
	void* base() {
		return this->array;
	}
	const void* base() const {
		return this->array;
	}
};

JJString addUnicodeEscapes(const JJString& str);
\#endif
