#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi


JJString TokenManagerError::lexicalError(bool EOFSeen, int lexState, int errorLine, int errorColumn, const JJString& errorAfter, JJChar curChar) {
    JJString s;
\#if (JAVACC_CHAR_TYPE_SIZEOF == 1)
     s += "Lexical error at line ";
     s += std::to_string(errorLine);
     s += ":";
     s += std::to_string(errorColumn);
     s += ".  Encountered: ";
     s += curChar;
     s += "(";
     s += std::to_string((int)curChar);
     s += ") after: ";
     s += errorAfter;
\#else
     s += L"Lexical error at line ";
     s += std::to_wstring(errorLine);
     s += L":";
     s += std::to_wstring(errorColumn);
     s += L".  Encountered: ";
     s += curChar;
     s += L"(";
     s += std::to_wstring((int)curChar);
     s += L") after: ";
     s += errorAfter;
\#endif
    return s;
  }

JJString TokenManagerError::getMessage() {
  return message;
}

TokenManagerError::TokenManagerError() {
  errorCode = -1;
}
TokenManagerError::TokenManagerError(const JJString & message, int reason) {
  errorCode = reason;
}
TokenManagerError::TokenManagerError(bool EOFSeen, int lexState, int errorLine, int errorColumn, const JJString& errorAfter, JJChar curChar, int reason) {
  message = lexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);
  errorCode = reason;
}
TokenManagerError::~TokenManagerError() { 
}
#if NAMESPACE
${NAMESPACE_CLOSE}
#fi

// i < 16 - guaranteed
static char hexChar(int i) {
  if (i < 10) {
    return i + '0';
  }
  return 'a' + (i - 10);
}

/**
 * Replaces unprintable characters by their escaped (or unicode escaped)
 * equivalents in the given string
 */
\#if (JAVACC_CHAR_TYPE_SIZEOF == 1)
\#define JJB "\\b"
\#define JJT "\\t"
\#define JJN "\\n"
\#define JJF "\\f"
\#define JJR "\\r"
\#define JJS "\\\\"
\#define JJU "\\u"
\#define JJM 0xff
\#else
\#define JJB L"\\b"
\#define JJT L"\\t"
\#define JJN L"\\n"
\#define JJF L"\\f"
\#define JJR L"\\r"
\#define JJS L"\\\\"
\#define JJU L"\\u"
\#define JJM 0xffff
\#endif
JJString addUnicodeEscapes(const JJString& str) {
  JJString retval;
  for (size_t i = 0; i < str.size(); i++) {
    JJChar ch = str[i];
    switch (ch)
    {
      case '\b':
        retval.append(JJB);
        continue;
      case '\t':
        retval.append(JJT);
        continue;
      case '\n':
        retval.append(JJN);
        continue;
      case '\f':
        retval.append(JJF);
        continue;
      case '\r':
        retval.append(JJR);
        continue;
      case '\\':
        retval.append(JJS);
        continue;
      default:
        if (ch < JJM) {
          retval += ch;
          continue;
        }
        retval.append(JJU);
        retval += (hexChar(ch >> 12));
        retval += (hexChar((ch & 0x0f00) >> 8));
        retval += (hexChar((ch & 0x00f0) >> 4));
        retval += (hexChar(ch & 0x000f));
        continue;
    }
  }
  return retval;
}
\#undef JJB
\#undef JJT
\#undef JJN
\#undef JJF
\#undef JJR
\#undef JJS
\#undef JJU
\#undef JJM

