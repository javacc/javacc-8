\#ifndef JAVACC_CHAR_STREAM_H
\#define JAVACC_CHAR_STREAM_H

#if LIBRARY
\#include "ImportExport.h"
#fi
\#include "JavaCC.h"

#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi

/**
 * This class describes a character stream that maintains line and
 * column number positions of the characters.  It also has the capability
 * to backup the stream to some extent.  An implementation of this
 * class is used in the TokenManager implementation generated by
 * JavaCCParser.
 *
 * All the methods except backup can be implemented in any fashion. backup
 * needs to be implemented correctly for the correct operation of the lexer.
 * Rest of the methods are all used to get information like line number,
 * column number and the string that constitutes a token and are not used
 * by the lexer. Hence their implementation won't affect the generated lexer's
 * operation.
 */
 
#if LIBRARY
class ${PARSER_NAME_UPPER_CASE}_API CharStream {
#else
class CharStream {
#fi
public:
  virtual ~CharStream() {}
	
  virtual void setTabSize(int i) = 0;
  virtual int  getTabSize() = 0;

  virtual int getColumn() = 0;
  virtual int getLine() = 0;
  virtual int getEndColumn() = 0;
  virtual int getEndLine() = 0;
  virtual int getBeginColumn() = 0;
  virtual int getBeginLine() = 0;

  virtual bool getTrackLineColumn() = 0;
  virtual void setTrackLineColumn(bool val) = 0;

/**
 * Backs up the input stream by amount steps. Lexer calls this method if it
 * had already read some characters, but could not use them to match a
 * (longer) token. So, they will be used again as the prefix of the next
 * token and it is the implementation's responsibility to do this right.
 */
  virtual void backup(int amount) = 0;

/**
 * Returns the next character that marks the beginning of the next token.
 * All characters must remain in the buffer between two successive calls
 * to this method to implement backup correctly.
 */
  virtual  JJChar beginToken() = 0;


/**
 * Returns the next character from the selected input.  The method
 * of selecting the input is the responsibility of the class
 * implementing this class.
 */
  virtual inline JJChar readChar() = 0;

  virtual void expandBuff(bool wrapAround) = 0;
  virtual void fillBuff() = 0;

  /**
   * Returns a string made up of characters from the marked token beginning
   * to the current buffer position. Implementations can return
   * anything that they want to. For example, for efficiency, one might decide
   * to just return NULL, which is a valid implementation.
   */
  virtual JJString getImage() = 0;

  /**
   * Returns an array of characters that make up the suffix of length 'len' for
   * the currently matched token. This is used to build up the matched string
   * for use in actions in the case of MORE. A simple and inefficient
   * implementation of this is as follows :
   */
  virtual JJString getSuffix(int len) = 0;

  /**
   * The lexer calls this function to indicate that it is done with the stream
   * and hence implementations can free any resources held by this class.
   */
  virtual void deleteBuffers() = 0;

  virtual bool endOfInput() = 0;

  virtual void ReInit(ReaderStream *input_stream) = 0;
  virtual void ReInit(ReaderStream *input_stream, int startline, int startcolumn) = 0;
  virtual void ReInit(ReaderStream *input_stream, int startline, int startcolumn, int buffersize) = 0;

  virtual void ReInit(const JJString& str, int startline, int startcolumn) = 0;
  virtual void ReInit(const JJString& str, int startline, int startcolumn, int buffersize) = 0;

  virtual void adjustBeginLineColumn(int newLine, int newCol) = 0;

protected:
  virtual void updateLineColumn(JJChar c) = 0;

};

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi


\#endif
