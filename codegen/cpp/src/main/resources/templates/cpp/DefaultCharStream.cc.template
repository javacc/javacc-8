
namespace {
template <class T>
void ArrayCopy(T* src, int src_offset, T* dest, int dest_offset, int len) {
 for (int i = 0; i < len; i++) {
   dest[dest_offset + i] = src[src_offset + i];
 }
}

class StringReaderStream : public ReaderStream {
 public:
  StringReaderStream(const JJString& str) : str_(str), cur_(0), max_(str.size()) {}
  virtual size_t read(JJChar *bufptr, int offset, size_t len) {
    size_t count = str_.copy(bufptr + offset, len > max_ ? max_ : len, cur_);
    cur_ += count;
    max_ -= count;
    return count;
  }
  virtual ~StringReaderStream() {}
  virtual bool endOfInput() {
    return max_ == 0;
  }

 private:
  const JJString str_;
  size_t cur_;
  size_t max_;
};
}

#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi
void DefaultCharStream::init() {
  bufline        	= nullptr;
  bufcolumn      	= nullptr;
  buffer         	= nullptr;
  bufpos			= 0;
  bufsize			= 0;
  tokenBegin		= 0;
  column			= 0;
  line				= 0;
  prevCharIsCR		= false;
  prevCharIsLF		= false;
  available			= 0;
  maxNextCharInd	= 0;
  inBuf				= 0;
  tabSize			= 8;
  trackLineColumn	= true;
  inputStream    	= nullptr;
  deleteStream		= false;
}
DefaultCharStream::DefaultCharStream(const JJChar *buf, int sz, int startline, int startcolumn, int buffersize)
{
  init();
  ReInit(JJString(buf, sz), startline, startcolumn, buffersize);
}

DefaultCharStream::DefaultCharStream(const JJChar *buf, int sz, int startline, int startcolumn)
{
  init();
  ReInit(JJString(buf, sz), startline, startcolumn, InitialBufferSize);
}

DefaultCharStream::DefaultCharStream(const JJString& str, int startline, int startcolumn, int buffersize)
{
  init();
  ReInit(str, startline, startcolumn, buffersize);
}

DefaultCharStream::DefaultCharStream(const JJString& str, int startline, int startcolumn)
{
  init();
  ReInit(str, startline, startcolumn, InitialBufferSize);
}

DefaultCharStream::DefaultCharStream(ReaderStream *input_stream, int startline, int startcolumn, int buffersize)
{
  init();
  ReInit(input_stream, startline, startcolumn, buffersize);
}

DefaultCharStream::DefaultCharStream(ReaderStream *input_stream, int startline, int startcolumn)
{
  init();
  ReInit(input_stream, startline, startcolumn, InitialBufferSize);
}

DefaultCharStream::DefaultCharStream(ReaderStream *input_stream)
{
  init();
  ReInit(input_stream, 1, 1, InitialBufferSize);
}

void DefaultCharStream::ReInit(const JJString& str, int startline, int startcolumn) {
  init();
  ReInit(str, startline, startcolumn, InitialBufferSize);
}

DefaultCharStream::~DefaultCharStream() {
  if (deleteStream) {
   delete inputStream;
  }
  deleteBuffers();
}


void DefaultCharStream::ReInit(ReaderStream *input_stream, int startline, int startcolumn) {
  ReInit(input_stream, startline, startcolumn, InitialBufferSize);
}
 
void DefaultCharStream::ReInit(ReaderStream *input_stream) {
  ReInit(input_stream, 1, 1, InitialBufferSize);
} 

#if KEEP_LINE_COLUMN
int DefaultCharStream::getBufcolumn(int pos) {
  if (trackLineColumn && pos>=0) {
    return bufcolumn[pos];
  } else {
    return -1;
  }
}

int DefaultCharStream::getBufline(int pos) {
  if (trackLineColumn && pos>=0) {
    return bufline[pos];
  } else {
    return -1;
  }
}
#fi

void DefaultCharStream::ReInit(const JJString& str, int startline, int startcolumn, int buffersize) {
  StringReaderStream *stream = new StringReaderStream(str);
  ReInit(stream, startline, startcolumn, buffersize);
  deleteStream = true;
}

void DefaultCharStream::ReInit(ReaderStream *input_stream, int startline, int startcolumn, int buffersize) {
  if (deleteStream) {
   delete inputStream;
  }

  if (buffer) {
    deleteBuffers();
  }

  available = bufsize = buffersize;
  buffer = new JJChar[buffersize];
  bufline = new int[buffersize];
  bufcolumn = new int[buffersize];

  column = startcolumn - 1;
  inputStream = input_stream;
  line = startline;
  prevCharIsLF = prevCharIsCR = false;
  tokenBegin = inBuf = maxNextCharInd = 0;
  bufpos = -1;
  deleteStream = false;
}

void DefaultCharStream::backup(int amount) {
  inBuf += amount; bufpos -= amount;
  if (bufpos < 0) {
    bufpos += bufsize;
  }
}

JJChar DefaultCharStream::beginToken() {
  tokenBegin = -1;
  JJChar c = readChar();
  tokenBegin = bufpos;
  return c;
}

JJChar DefaultCharStream::readChar() {
  if (inBuf > 0) {
    --inBuf; ++bufpos;
    if (bufpos == bufsize) {
      bufpos = 0;
    }
    return buffer[bufpos];
  }

  ++bufpos;
  if (bufpos >= maxNextCharInd) {
    fillBuff();
  }

  JJChar c = buffer[bufpos];

#if KEEP_LINE_COLUMN
  if (trackLineColumn) {
    updateLineColumn(c);
  }
#fi
  return c;
}

JJString DefaultCharStream::getImage() {
  if (bufpos >= tokenBegin)
    return JJString(buffer + tokenBegin, bufpos - tokenBegin + 1);
  else
    return JJString(buffer + tokenBegin, bufsize - tokenBegin).append(buffer, bufpos + 1);
}

JJString DefaultCharStream::getSuffix(int len) {
  if ((bufpos + 1) >= len) {
    return JJString(buffer + bufpos - len + 1, len);
  }
  return JJString(buffer + bufsize - (len - bufpos - 1), len - bufpos - 1).append(buffer, bufpos + 1);
}

bool DefaultCharStream::endOfInput() {
  return inBuf == 0 && bufpos + 1 >= maxNextCharInd && inputStream->endOfInput();
}

void DefaultCharStream::deleteBuffers() {
  delete[] buffer;
  delete[] bufline;
  delete[] bufcolumn;
}

void DefaultCharStream::adjustBeginLineColumn(int newLine, int newCol) {
  int start = tokenBegin;
  int len;

  if (bufpos >= tokenBegin) {
    len = bufpos - tokenBegin + inBuf + 1;
  } else {
    len = bufsize - tokenBegin + bufpos + 1 + inBuf;
  }

  int i = 0, j = 0, k = 0;
  int nextColDiff = 0, columnDiff = 0;

  while (i < len && bufline[j = start % bufsize] ==
         bufline[k = (start + 1) % bufsize]) {
    bufline[j] = newLine;
    nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
    bufcolumn[j] = newCol + columnDiff;
    columnDiff = nextColDiff;
    i++;
    start++;
  }

  if (i < len) {
    bufline[j] = newLine++;
    bufcolumn[j] = newCol + columnDiff;

    while (i++ < len) {
      if (bufline[j = start % bufsize] != bufline[(start + 1) % bufsize])
        bufline[j] = newLine++;
      else
        bufline[j] = newLine;
      start++;
    }
  }

  line = bufline[j];
  column = bufcolumn[j];
}

void DefaultCharStream::expandBuff(bool wrapAround) {
  JJChar *newbuffer = new JJChar[bufsize + 2048];
  int *newbufline = new int[bufsize + 2048];
  int *newbufcolumn = new int[bufsize + 2048];

  if (wrapAround) {
    ArrayCopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
    ArrayCopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
    ArrayCopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
    ArrayCopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
    ArrayCopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
    ArrayCopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
    bufpos += (bufsize - tokenBegin);
  } else {
    ArrayCopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
    ArrayCopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
    ArrayCopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
    bufpos -= tokenBegin;
  }

  maxNextCharInd = bufpos;
  deleteBuffers();
  buffer = newbuffer;
  bufline = newbufline;
  bufcolumn = newbufcolumn;
  bufsize += 2048;
  available = bufsize;
  tokenBegin = 0;
}

void DefaultCharStream::fillBuff() {
  if (maxNextCharInd == available) {
    if (available == bufsize) {
      if (tokenBegin > 2048) {
        bufpos = maxNextCharInd = 0;
        available = tokenBegin;
      } else if (tokenBegin < 0) {
        bufpos = maxNextCharInd = 0;
      } else {
        expandBuff(false);
      }
    } else if (available > tokenBegin) {
      available = bufsize;
    } else if ((tokenBegin - available) < 2048) {
      expandBuff(true);
    } else {
      available = tokenBegin;
    }
  }

  size_t i = inputStream->read(buffer, maxNextCharInd, available - maxNextCharInd);
  if (i > 0) {
    maxNextCharInd += i;
  } else {
    --bufpos;
    backup(0);
    if (tokenBegin == -1) {
      tokenBegin = bufpos;
    }
  }
}

void DefaultCharStream::updateLineColumn(JJChar c) {
  column++;
  if (prevCharIsLF) {
    prevCharIsLF = false;
    column = 1;
    line++;
  } else if (prevCharIsCR) {
    prevCharIsCR = false;
    if (c == '\n') {
      prevCharIsLF = true;
    } else {
      column = 1;
      line++;
    }
  }

  switch (c) {
    case '\r' :
      prevCharIsCR = true;
      break;
    case '\n' :
      prevCharIsLF = true;
      break;
    case '\t' :
      column--;
      column += (tabSize - (column % tabSize));
      break;
    default :
      break;
  }

  bufline[bufpos] = line;
  bufcolumn[bufpos] = column;
}

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi
