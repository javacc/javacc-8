#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

#if SUPPORT_CLASS_VISIBILITY_PUBLIC
public
#fi
interface Node {

  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  void jjtOpen();

  /** This method is called after all the child nodes have been
    added. */
  void jjtClose();

  /** This pair of methods are used to inform the node of its
    parent. */
  void jjtSetParent(Node n);
  Node jjtGetParent();

  /** This method tells the node to add its argument to the node's
    list of children.  */
  void jjtAddChild(Node n, int i);

  /** This method returns a child node.  The children are numbered
     from zero, left to right. */
  Node jjtGetChild(int i);

  /** Return the number of children the node has. */
  int jjtGetNumChildren();

  int getId();
#if VISITOR

  /** Accept the visitor. **/
#if VISITOR_EXCEPTION
  ${VISITOR_RETURN_TYPE} jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-object} data) throws ${VISITOR_EXCEPTION};
#else
  ${VISITOR_RETURN_TYPE} jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-object} data);
#fi
#fi
}

#if NODE_EXTENDS
public partial class SimpleNode : ${NODE_EXTENDS}, Node {
#else
public partial class SimpleNode : Node {
#fi

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected object value;
  protected ${PARSER_NAME} parser;
#if TRACK_TOKENS
  protected Token firstToken;
  protected Token lastToken;
#fi

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(${PARSER_NAME} p, int i) : this(i) {
    parser = p;
  }

#if NODE_FACTORY
  public static Node jjtCreate(int id) {
    return new SimpleNode(id);
  }

  public static Node jjtCreate(${PARSER_NAME} p, int id) {
    return new SimpleNode(p, id);
  }

#fi
  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.Length) {
      Node[] c = new Node[i + 1];
      for (int j = 0; j < children.Length; j++) c[j] = children[j];
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.Length;
  }

  public void jjtSetValue(object value) { this.value = value; }
  public object jjtGetValue() { return value; }

#if TRACK_TOKENS
  public Token jjtGetFirstToken() { return firstToken; }
  public void jjtSetFirstToken(Token token) { this.firstToken = token; }
  public Token jjtGetLastToken() { return lastToken; }
  public void jjtSetLastToken(Token token) { this.lastToken = token; }

#fi
#if VISITOR
  /** Accept the visitor. **/
  virtual public ${VISITOR_RETURN_TYPE} jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-object} data)
#if VISITOR_EXCEPTION
     throws ${VISITOR_EXCEPTION}
#fi
{
#if VISITOR_RETURN_TYPE_VOID
    visitor.Visit(this, data);
#else
    return visitor.Visit(this, data);
#fi
  }

  /** Accept the visitor. **/
  public object childrenAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-object} data)
#if VISITOR_EXCEPTION
     throws ${VISITOR_EXCEPTION}
#fi
{
    if (children != null) {
      for (int i = 0; i < children.Length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

#fi

  public string ToString(string prefix) { return prefix + ToString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(string prefix) {
    System.Console.Out.WriteLine(ToString(prefix));
    if (children != null) {
      for (int i = 0; i < children.Length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  public int getId() {
    return id;
  }
}

#if NAMESPACE
}
#fi
