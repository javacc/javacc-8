#if NAMESPACE
namespace ${NAMESPACE}
{
#fi
/**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this partial class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */
public partial class ParseException : System.Exception {

  /**
   * The end of line string for this machine.
   */
  protected static string EOL = System.Environment.NewLine;

  /**
   * Thisructor is used by the method "generateParseException"
   * in the generated parser.  Calling thisructor generates
   * a new object of this type with the fields "currentToken",
   * "expectedTokenSequences", and "tokenImage" set.
   */
  public ParseException(Token currentTokenVal,
                        int[][] expectedTokenSequencesVal,
                        string[] tokenImageVal
                       ) : base(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))
  {
    currentToken = currentTokenVal;
    expectedTokenSequences = expectedTokenSequencesVal;
    tokenImage = tokenImageVal;
  }

  /**
   * The followingructors are for use by you for whatever
   * purpose you can think of.  Constructing the exception in this
   * manner makes the exception behave in the normal way - i.e., as
   * documented in the partial class "System.Exception".  The fields "errorToken",
   * "expectedTokenSequences", and "tokenImage" do not contain
   * relevant information.  The JavaCC generated code does not use
   * theseructors.
   */

  public ParseException() {
  }

  /** Constructor with message. */
  public ParseException(string message)  : base(message) {
  }


  /**
   * This is the last token that has been consumed successfully.  If
   * this object has been created due to a parse error, the token
   * followng this token will (therefore) be the first error token.
   */
  public Token currentToken;

  /**
   * Each entry in this array is an array of integers.  Each array
   * of integers represents a sequence of tokens (by their ordinal
   * values) that is expected at this point of the parse.
   */
  public int[][] expectedTokenSequences;

  /**
   * This is a reference to the "tokenImage" array of the generated
   * parser within which the parse error occurred.  This array is
   * defined in the generated ...Constants interface.
   */
  public string[] tokenImage;

  /**
   * It uses "currentToken" and "expectedTokenSequences" to generate a parse
   * error message and returns it.  If this object has been created
   * due to a parse error, and you do not catch it (it gets thrown
   * from the parser) the correct error message
   * gets displayed.
   */
  private static string initialise(Token currentToken,
                           int[][] expectedTokenSequences,
                           string[] tokenImage) {

    string expected = string.Empty;
    int maxSize = 0;
    for (int i = 0; i < expectedTokenSequences.Length; i++) {
      if (maxSize < expectedTokenSequences[i].Length) {
        maxSize = expectedTokenSequences[i].Length;
      }
      for (int j = 0; j < expectedTokenSequences[i].Length; j++) {
        expected += tokenImage[expectedTokenSequences[i][j]] + ' ';
      }
      if (expectedTokenSequences[i][expectedTokenSequences[i].Length - 1] != 0) {
        expected += "...";
      }
      expected += EOL + "    ";
    }
    string retval = "Encountered \"";
    Token tok = currentToken.next;
    for (int i = 0; i < maxSize; i++) {
      if (i != 0) retval += " ";
      if (tok.kind == 0) {
        retval += tokenImage[0];
        break;
      }
      retval += " " + tokenImage[tok.kind];
      retval += " \"";
      retval += add_escapes(tok.image);
      retval += " \"";
      tok = tok.next;
    }
#if KEEP_LINE_COLUMN
    retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
#fi
    retval += "." + EOL;
    
    
    if (expectedTokenSequences.Length == 0) {
        // Nothing to add here
    } else {
	    if (expectedTokenSequences.Length == 1) {
	      retval += "Was expecting:" + EOL + "    ";
	    } else {
	      retval += "Was expecting one of:" + EOL + "    ";
	    }
	    retval += expected.ToString();
    }
    
    return retval;
  }


  /**
   * Used to convert raw characters to their escaped version
   * when these raw version cannot be used as part of an ASCII
   * string literal.
   */
  static string add_escapes(string str) {
      string retval = string.Empty;
      char ch;
      for (int i = 0; i < str.Length; i++) {
        switch (str[i])
        {
           case '\b':
              retval += "\\b";
              continue;
           case '\t':
              retval += "\\t";
              continue;
           case '\n':
              retval += "\\n";
              continue;
           case '\f':
              retval += "\\f";
              continue;
           case '\r':
              retval += "\\r";
              continue;
           case '\"':
              retval += "\\\"";
              continue;
           case '\'':
              retval += "\\\'";
              continue;
           case '\\':
              retval += "\\\\";
              continue;
           default:
              if ((ch = str[i]) < 0x20 || ch > 0x7e) {
                 retval += "\\u" +  ((int)ch).ToString("X4");
              } else {
                 retval += ch;
              }
              continue;
        }
      }
      return retval.ToString();
   }

}
#if NAMESPACE
}
#fi
