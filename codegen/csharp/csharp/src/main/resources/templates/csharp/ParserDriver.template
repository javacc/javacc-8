  /////////////// BOILER PLATE CODE ///////////////////////////
  public bool jj_dummy = true;
  private bool jj_done = false;
  /** Generated Token Manager. */
  public ${parserName}TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;

  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  private bool hasError = false;
  private bool jj_semLA = false;
  private bool jj_lookingAhead = false;

  /** Constructor. */
  public ${parserName}(System.IO.TextReader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ${parserName}TokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
#if ERROR_REPORTING
	 for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
#fi
   hasError = false;
  }

  /** Reinitialise. */
  public void ReInit(System.IO.TextReader stream) {
	  if (jj_input_stream == null) {
	     jj_input_stream = new SimpleCharStream(stream, 1, 1);
	  } else {
	     jj_input_stream.ReInit(stream, 1, 1);
	  }
	  if (token_source == null) {
      token_source = new ${parserName}TokenManager(jj_input_stream);
	  }
  
	  token_source.ReInit(jj_input_stream);
	  token = new Token();
	  jj_ntk = -1;
	  jj_gen = 0;
    hasError = false;
#if ERROR_REPORTING
	  for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
#fi
  }

  /** Constructor with generated Token Manager. */
  public ${parserName}(${parserName}TokenManager tm) {
	  token_source = tm;
	  token = new Token();
	  jj_ntk = -1;
	  jj_gen = 0;
    hasError = false;
#if ERROR_REPORTING
	  for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
#fi
  }

  /** Reinitialise. */
  public void ReInit(${parserName}TokenManager tm) {
	  token_source = tm;
	  token = new Token();
	  jj_ntk = -1;
	  jj_gen = 0;
    hasError = false;
#if ERROR_REPORTING
	  for (int i = 0; i < jj_2_rtns.Length; i++) jj_2_rtns[i] = new JJCalls();
#fi
  }

  private Token jj_consume_token(int kind)  {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {

#if ERROR_REPORTING
	   jj_gen++;
	   if (++jj_gc > 100) {
		   jj_gc = 0;
		   for (int i = 0; i < jj_2_rtns.Length; i++) {
		     JJCalls c = jj_2_rtns[i];
		     while (c != null) {
			     if (c.gen < jj_gen) c.first = null;
			     c = c.next;
		     }
		   }
	   }
	   trace_token(token, "");
#fi

	   return token;
	 }

	 token = oldToken;
#if ERROR_REPORTING
	 jj_kind = kind;
#fi
	 throw generateParseException();
  }

  private bool jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
#if ERROR_REPORTING
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
#fi
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) { return jj_done = true; }
	 return false;
  }


/** Get the next Token. */
  public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
#if DEBUG_PARSER
	   trace_token(token, " (in getNextToken)");
#fi
	 return token;
  }

/** Get the specific Token. */
  public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
   hasError = true;
	 int[][] exptokseq = new int[0][];
#if ERROR_REPORTING
	 jj_expentries.Clear();
	 bool[] la1tokens = new bool[344];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }

	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		   if ((jj_la1_6[i] & (1<<j)) != 0) {
			 la1tokens[192+j] = true;
		   }
		   if ((jj_la1_7[i] & (1<<j)) != 0) {
			 la1tokens[224+j] = true;
		   }
		   if ((jj_la1_8[i] & (1<<j)) != 0) {
			 la1tokens[256+j] = true;
		   }
		   if ((jj_la1_9[i] & (1<<j)) != 0) {
			 la1tokens[288+j] = true;
		   }
		   if ((jj_la1_10[i] & (1<<j)) != 0) {
			 la1tokens[320+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 344; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.Add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 exptokseq = new int[jj_expentries.Count][];
	 for (int i = 0; i < jj_expentries.Count; i++) {
	   exptokseq[i] = jj_expentries[i];
	 }
#fi

	 return new ParseException(token, exptokseq, tokenImage);
  }


#if ERROR_REPORTING
  private int[] jj_la1 = new int[${numproductions}];  // TODO(sreeni): check this out.
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static ${parserName}()  {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	   jj_la1_init_6();
	   jj_la1_init_7();
	   jj_la1_init_8();
	   jj_la1_init_9();
	   jj_la1_init_10();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {};
	}
	private static void jj_la1_init_6() {
	   jj_la1_6 = new int[] {};
	}
	private static void jj_la1_init_7() {
	   jj_la1_7 = new int[] {};
	}
	private static void jj_la1_init_8() {
	   jj_la1_8 = new int[] {};
	}
	private static void jj_la1_init_9() {
	   jj_la1_9 = new int[] {};
	}
	private static void jj_la1_init_10() {
	   jj_la1_10 = new int[] {};
	}
#fi

#if ERROR_REPORTING

  private int trace_indent = 0;
  private bool traceEnabled;

/** Trace enabled. */
  public bool trace_enabled() {
	 return traceEnabled;
  }

/** Enable tracing. */
  public void enable_tracing() {
	 traceEnabled = true;
  }

/** Disable tracing. */
  public void disable_tracing() {
	 traceEnabled = false;
  }

  protected void trace_call(string s) {
	 if (traceEnabled) {
	   for (int i = 0; i < trace_indent; i++) { System.Console.Out.Write(" "); }
	   System.Console.Out.WriteLine("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(string s) {
	 trace_indent = trace_indent - 2;
	 if (traceEnabled) {
	   for (int i = 0; i < trace_indent; i++) { System.Console.Out.Write(" "); }
	   System.Console.Out.WriteLine("Return: " + s);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (traceEnabled) {
	   for (int i = 0; i < trace_indent; i++) { System.Console.Out.Write(" "); }
	   System.Console.Out.Write("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].Equals("\"" + t1.image + "\"")) {
		 System.Console.Out.Write(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.Console.Out.WriteLine(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }
  protected void trace_token(Token t, string where) {
	 if (traceEnabled) {
	   for (int i = 0; i < trace_indent; i++) { System.Console.Out.Write(" "); }
	   System.Console.Out.Write("Consumed token of kind: " + t.kind + " <" + t.image);
	   System.Console.Out.WriteLine(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }
#fi

#if ERROR_REPORTING
  private int jj_kind = -1;
  private JJCalls[] jj_2_rtns = new JJCalls[${numproductions}];
  private bool jj_rescan = false;
  private int jj_gc = 0;
  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }


  internal partial class JJCalls {
	 internal int gen;
	 internal Token first;
	 internal int arg;
	 internal JJCalls next;
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < ${numproductions}; i++) {
		 JJCalls p = jj_2_rtns[i];

		 while (p != null) {
		   if (p.gen > jj_gen) {
			   jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
         System.Type thisType = this.GetType();
         System.Reflection.MethodInfo theMethod = thisType.GetMethod("jj_3_" + (i + 1), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
         if (theMethod != null)
           theMethod.Invoke(this, new object[0]);
		   }
		   p = p.next;
		 }
	 }
	 jj_rescan = false;
  }

  private System.Collections.Generic.List<int[]> jj_expentries = new System.Collections.Generic.List<int[]>();
  private int[] jj_expentry;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   foreach (int[] oldentry in jj_expentries) {
		 if (oldentry.Length == jj_expentry.Length) {
		   bool isMatched = true;

		   for (int i = 0; i < jj_expentry.Length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.Add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }
#fi
