#if NAMESPACE
namespace ${NAMESPACE}
{
#fi
/** Token Manager Error. */
${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :}class TokenMgrError : System.Exception
{

  /**
   * Ordinals for various reasons why an Error of this type can be thrown.
   */

  /**
   * Lexical error occurred.
   */
  public static int LEXICAL_ERROR = 0;

  /**
   * Tried to change to an invalid lexical state.
   */
  public static int INVALID_LEXICAL_STATE = 2;

  /**
   * Detected (and bailed out of) an infinite loop in the token manager.
   */
  public static int LOOP_DETECTED = 3;

  /**
   * Indicates the reason why the exception is thrown. It will have
   * one of the above 4 values.
   */
  int errorCode;

  /**
   * Replaces unprintable characters by their escaped (or unicode escaped)
   * equivalents in the given string
   */
  internal static string addEscapes(string str) {
    string retval = string.Empty;
    char ch;
    for (int i = 0; i < str.Length; i++) {
      switch (str[i])
      {
        case '\b':
          retval += "\\b";
          continue;
        case '\t':
          retval += "\\t";
          continue;
        case '\n':
          retval += "\\n";
          continue;
        case '\f':
          retval += "\\f";
          continue;
        case '\r':
          retval += "\\r";
          continue;
        case '\"':
          retval += "\\\"";
          continue;
        case '\'':
          retval += "\\\'";
          continue;
        case '\\':
          retval += "\\\\";
          continue;
        default:
          if ((ch = str[i]) < 0x20 || ch > 0x7e) {
            retval += "\\U" + ((int)ch).ToString("X4");;
          } else {
            retval += ch;
          }
          continue;
      }
    }
    return retval.ToString();
  }

  /**
   * Returns a detailed message for the Error when it is thrown by the
   * token manager to indicate a lexical error.
   * Parameters :
   *    EOFSeen     : indicates if EOF caused the lexical error
   *    curLexState : lexical state in which this error occurred
   *    errorLine   : line number when the error occurred
   *    errorColumn : column number when the error occurred
   *    errorAfter  : prefix that was seen before this error occurred
   *    curchar     : the offending character
   * Note: You can customize the lexical error message by modifying this method.
   */
  internal static string LexicalErr(bool EOFSeen, int lexState, int errorLine, int errorColumn, string errorAfter, int curChar) {
    char curChar1 = (char)curChar;
    return("Lexical error at line " +
          errorLine + ", column " +
          errorColumn + ".  Encountered: " +
          (EOFSeen ? "<EOF> " : ("\"" + addEscapes(curChar1.ToString()) + "\"") + " (" + (int)curChar + "), ") +
          "after : \"" + addEscapes(errorAfter) + "\"");
  }

  /** No argructor. */
  public TokenMgrError() {
  }

  /** Constructor with message and reason. */
  public TokenMgrError(string message, int reason) : base(message) {
    errorCode = reason;
  }

  /** Full Constructor. */
  public TokenMgrError(bool EOFSeen, int lexState, int errorLine, int errorColumn, string errorAfter, int curChar, int reason) :
    this(LexicalErr(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason) {
  }
}
#if NAMESPACE
}
#fi
